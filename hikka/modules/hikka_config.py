# ¬©Ô∏è Dan Gazizullin, 2021-2023
# This file is a part of Hikka Userbot
# üåê https://github.com/hikariatama/Hikka
# You can redistribute it and/or modify it under the terms of the GNU AGPLv3
# üîë https://www.gnu.org/licenses/agpl-3.0.html

import ast
import contextlib
import functools
import typing
from math import ceil

from hikkatl.tl.types import Message

from .. import loader, translations, utils
from ..inline.types import InlineCall

# Everywhere in this module, we use the following naming convention:
# `obj_type` of non-core module = False
# `obj_type` of core module = True
# `obj_type` of library = "library"


@loader.tds
class HikkaConfigMod(loader.Module):
    """Interactive configurator for Hikka Userbot"""

    strings = {
        "name": "HikkaConfig",
        "choose_core": "‚öôÔ∏è <b>Choose a category</b>",
        "configure": "‚öôÔ∏è <b>Choose a module to configure</b>",
        "configure_lib": "üì¶ <b>Choose a library to configure</b>",
        "configuring_mod": (
            "‚öôÔ∏è <b>Choose config option for mod</b> <code>{}</code>\n\n<b>Current"
            " options:</b>\n\n{}"
        ),
        "configuring_lib": (
            "üì¶ <b>Choose config option for library</b> <code>{}</code>\n\n<b>Current"
            " options:</b>\n\n{}"
        ),
        "configuring_option": (
            "‚öôÔ∏è <b>Configuring option</b> <code>{}</code> <b>of mod"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Default: {}</b>\n\n<b>Current:"
            " {}</b>\n\n{}"
        ),
        "configuring_option_lib": (
            "üì¶ <b>Configuring option</b> <code>{}</code> <b>of library"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Default: {}</b>\n\n<b>Current:"
            " {}</b>\n\n{}"
        ),
        "option_saved": (
            "<emoji document_id=5318933532825888187>‚öôÔ∏è</emoji> <b>Option"
            "</b> <code>{}</code> <b>of module</b> <code>{}</code><b>"
            " saved!</b>\n<b>Current: {}</b>"
        ),
        "option_saved_lib": (
            "<emoji document_id=5431736674147114227>üì¶</emoji> <b>Option"
            "</b> <code>{}</code> <b>of library</b> <code>{}</code><b>"
            " saved!</b>\n<b>Current: {}</b>"
        ),
        "option_reset": (
            "‚ôªÔ∏è <b>Option</b> <code>{}</code> <b>of module</b> <code>{}</code> <b>has"
            " been reset to default</b>\n<b>Current: {}</b>"
        ),
        "option_reset_lib": (
            "‚ôªÔ∏è <b>Option</b> <code>{}</code> <b>of library</b> <code>{}</code> <b>has"
            " been reset to default</b>\n<b>Current: {}</b>"
        ),
        "args": "üö´ <b>You specified incorrect args</b>",
        "no_mod": "üö´ <b>Module doesn't exist</b>",
        "no_option": "üö´ <b>Configuration option doesn't exist</b>",
        "validation_error": "üö´ <b>You entered incorrect config value.\nError: {}</b>",
        "try_again": "üîÅ Try again",
        "typehint": "üïµÔ∏è <b>Must be a{eng_art} {}</b>",
        "set": "set",
        "set_default_btn": "‚ôªÔ∏è Reset default",
        "enter_value_btn": "‚úçÔ∏è Enter value",
        "enter_value_desc": "‚úçÔ∏è Enter new configuration value for this option",
        "add_item_desc": "‚úçÔ∏è Enter item to add",
        "remove_item_desc": "‚úçÔ∏è Enter item to remove",
        "back_btn": "üëà Back",
        "close_btn": "üîª Close",
        "add_item_btn": "‚ûï Add item",
        "remove_item_btn": "‚ûñ Remove item",
        "show_hidden": "üö∏ Show value",
        "hide_value": "üîí Hide value",
        "builtin": "üõ∞ Built-in",
        "external": "üõ∏ External",
        "libraries": "üì¶ Libraries",
    }

    strings_ru = {
        "choose_core": "‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>",
        "configure": "‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
        "configure_lib": "üì¶ <b>–í—ã–±–µ—Ä–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
        "configuring_mod": (
            "‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –º–æ–¥—É–ª—è</b> <code>{}</code>\n\n<b>–¢–µ–∫—É—â–∏–µ"
            " –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n{}"
        ),
        "configuring_lib": (
            "üì¶ <b>–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏</b> <code>{}</code>\n\n<b>–¢–µ–∫—É—â–∏–µ"
            " –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n{}"
        ),
        "configuring_option": (
            "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º</b> <code>{}</code> <b>–º–æ–¥—É–ª—è"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ:"
            " {}</b>\n\n<b>–¢–µ–∫—É—â–µ–µ: {}</b>\n\n{}"
        ),
        "configuring_option_lib": (
            "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º</b> <code>{}</code> <b>–±–∏–±–ª–∏–æ—Ç–µ–∫–∏"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ:"
            " {}</b>\n\n<b>–¢–µ–∫—É—â–µ–µ: {}</b>\n\n{}"
        ),
        "option_saved": (
            "<emoji document_id=5318933532825888187>‚öôÔ∏è</emoji> <b>–ü–∞—Ä–∞–º–µ—Ç—Ä"
            "</b> <code>{}</code> <b>–º–æ–¥—É–ª—è</b> <code>{}</code><b>"
            " —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n<b>–¢–µ–∫—É—â–µ–µ: {}</b>"
        ),
        "option_saved_lib": (
            "<emoji document_id=5431736674147114227>üì¶</emoji> <b>–ü–∞—Ä–∞–º–µ—Ç—Ä"
            "</b> <code>{}</code> <b>–±–∏–±–ª–∏–æ—Ç–µ–∫–∏</b> <code>{}</code><b>"
            " —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n<b>–¢–µ–∫—É—â–µ–µ: {}</b>"
        ),
        "option_reset": (
            "‚ôªÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä</b> <code>{}</code> <b>–º–æ–¥—É–ª—è</b> <code>{}</code><b>"
            " —Å–±—Ä–æ—à–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>\n<b>–¢–µ–∫—É—â–µ–µ: {}</b>"
        ),
        "option_reset_lib": (
            "‚ôªÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä</b> <code>{}</code> <b>–±–∏–±–ª–∏–æ—Ç–µ–∫–∏</b> <code>{}</code><b>"
            " —Å–±—Ä–æ—à–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>\n<b>–¢–µ–∫—É—â–µ–µ: {}</b>"
        ),
        "_cls_doc": "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä Hikka",
        "args": "üö´ <b>–¢—ã —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>",
        "no_mod": "üö´ <b>–ú–æ–¥—É–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>",
        "no_option": "üö´ <b>–£ –º–æ–¥—É–ª—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞</b>",
        "validation_error": (
            "üö´ <b>–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞.\n–û—à–∏–±–∫–∞: {}</b>"
        ),
        "try_again": "üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑",
        "typehint": "üïµÔ∏è <b>–î–æ–ª–∂–Ω–æ –±—ã—Ç—å {}</b>",
        "set": "–ø–æ—Å—Ç–∞–≤–∏—Ç—å",
        "set_default_btn": "‚ôªÔ∏è –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "enter_value_btn": "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ",
        "enter_value_desc": "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞",
        "add_item_desc": "‚úçÔ∏è –í–≤–µ–¥–∏ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å",
        "remove_item_desc": "‚úçÔ∏è –í–≤–µ–¥–∏ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
        "back_btn": "üëà –ù–∞–∑–∞–¥",
        "close_btn": "üîª –ó–∞–∫—Ä—ã—Ç—å",
        "add_item_btn": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç",
        "remove_item_btn": "‚ûñ –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç",
        "show_hidden": "üö∏ –ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ",
        "hide_value": "üîí –°–∫—Ä—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ",
        "builtin": "üõ∞ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ",
        "external": "üõ∏ –í–Ω–µ—à–Ω–∏–µ",
        "libraries": "üì¶ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏",
    }

    strings_fr = {
        "choose_core": "‚öôÔ∏è <b>choisissez la cat√©gorie</b>",
        "configure": "‚öôÔ∏è <b>Choisissez le module √† configurer</b>",
        "configure_lib": "üì¶ <b>Choisissez la biblioth√®que √† configurer</b>",
        "configuring_mod": (
            "‚öôÔ∏è <b>Choisissez le param√®tre pour le module</b>"
            " <code>{}</code>\n\n<b>Actuellement r√©glages:</b>\n\n{}"
        ),
        "configuring_lib": (
            "üì¶ <b>Choisissez le param√®tre pour la biblioth√®que</b>"
            " <code>{}</code>\n\n<b>Actuellement r√©glages:</b>\n\n{}"
        ),
        "configuring_option": (
            "‚öôÔ∏è <b>Contr√¥le des param√®tres</b> <code>{}</code> <b>module"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Standard:"
            " {}</b>\n\n<b>Actuelle: {}</b>\n\n{}"
        ),
        "configuring_option_lib": (
            "üì¶ <b>Contr√¥le des param√®tres</b> <code>{}</code> <b>library"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Standard:"
            " {}</b>\n\n<b>Actuelle: {}</b>\n\n{}"
        ),
        "option_saved": (
            "<emoji document_id=5318933532825888187>‚öôÔ∏è</emoji> <b>Param√®tre"
            "</b> <code>{}</code> <b>module</b> <code>{}</code><b>"
            " enregistr√©!</b>\n<b>Actuelle: {}</b>"
        ),
        "option_saved_lib": (
            "<emoji document_id=5431736674147114227>üì¶</emoji> <b>Param√®tre"
            "</b> <code>{}</code> <b>library</b> <code>{}</code><b>"
            " enregistr√©!</b>\n<b>Actuelle: {}</b>"
        ),
        "option_reset": (
            "‚ôªÔ∏è <b>Param√®tre</b> <code>{}</code> <b>module</b> <code>{}</code><b>"
            " r√©initialis√© √† la valeur par d√©faut</b>\n<b>Actuelle: {}</b>"
        ),
        "option_reset_lib": (
            "‚ôªÔ∏è <b>Param√®tre</b> <code>{}</code> <b>de la librairie</b>"
            " <code>{}</code><b> r√©initialis√© √† sa valeur par d√©faut</b>\n<b>Actuel:"
            " {}</b>"
        ),
        "_cls_doc": "Configuration interactive Hikka",
        "args": "üö´ <b>Vous avez sp√©cifi√© des arguments incorrects</b>",
        "no_mod": "üö´ <b>Le module n'existe pas</b>",
        "no_option": "üö´ <b>Le module n'a pas de param√®tre</b>",
        "validation_error": (
            "üö´ <b>Vous avez entr√© une valeur de configuration incorrecte.\nErreur:"
            " {}</b>"
        ),
        "try_again": "üîÅ Essayez √† nouveau",
        "typehint": "üïµÔ∏è <b>Doit √™tre {}</b>",
        "set": "mettre",
        "set_default_btn": "‚ôªÔ∏è Valeur par d√©faut",
        "enter_value_btn": "‚úçÔ∏è Entrer une valeur",
        "enter_value_desc": "‚úçÔ∏è Entrez une nouvelle valeur pour ce param√®tre",
        "add_item_desc": "‚úçÔ∏è Entrez l'√©l√©ment √† ajouter",
        "remove_item_desc": "‚úçÔ∏è Entrez l'√©l√©ment √† supprimer",
        "back_btn": "üëà Retour",
        "close_btn": "üîª Fermer",
        "add_item_btn": "‚ûï Ajouter un √©l√©ment",
        "remove_item_btn": "‚ûñ Supprimer un √©l√©ment",
        "show_hidden": "üö∏ Afficher la valeur",
        "hide_value": "üîí Masquer la valeur",
        "builtin": "üõ∞ Int√©gr√©",
        "external": "üõ∏ Externe",
        "libraries": "üì¶ Biblioth√®ques",
    }

    strings_it = {
        "choose_core": "‚öôÔ∏è <b>Scegli la categoria</b>",
        "configure": "‚öôÔ∏è <b>Scegli il modulo da configurare</b>",
        "configure_lib": "üì¶ <b>Scegli la libreria da configurare</b>",
        "configuring_mod": (
            "‚öôÔ∏è <b>Scegli il parametro per il modulo</b> <code>{}</code>\n\n<b>Attuale"
            " configurazione:</b>\n\n{}"
        ),
        "configuring_lib": (
            "üì¶ <b>Scegli il parametro per la libreria</b> <code>{}</code>\n\n<b>Attuale"
            " configurazione:</b>\n\n{}"
        ),
        "configuring_option": (
            "‚öôÔ∏è <b>Configurazione dell'opzione</b> <code>{}</code> <b>del"
            " modulo</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Standard:"
            " {}</b>\n\n<b>Attuale: {}</b>\n\n{}"
        ),
        "configuring_option_lib": (
            "üì¶ <b>Configurazione dell'opzione</b> <code>{}</code> <b>della"
            " libreria</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Standard:"
            " {}</b>\n\n<b>Attuale: {}</b>\n\n{}"
        ),
        "option_saved": (
            "<emoji document_id=5318933532825888187>‚öôÔ∏è</emoji> <b>Opzione"
            "</b> <code>{}</code> <b>del modulo</b> <code>{}</code><b>"
            " salvata!</b>\n<b>Attuale: {}</b>"
        ),
        "option_saved_lib": (
            "<emoji document_id=5431736674147114227>üì¶</emoji> <b>Opzione"
            "</b> <code>{}</code> <b>della libreria</b> <code>{}</code><b>"
            " salvata!</b>\n<b>Attuale: {}</b>"
        ),
        "option_reset": (
            "‚ôªÔ∏è <b>Opzione</b> <code>{}</code> <b>del modulo</b> <code>{}</code><b>"
            " resettata al valore di default</b>\n<b>Attuale: {}</b>"
        ),
        "option_reset_lib": (
            "‚ôªÔ∏è <b>Opzione</b> <code>{}</code> <b>della libreria</b> <code>{}</code><b>"
            " resettata al valore di default</b>\n<b>Attuale: {}</b>"
        ),
        "_cls_doc": "Configuratore interattivo di Hikka",
        "args": "üö´ <b>Hai fornito argomenti non validi</b>",
        "validation_error": (
            "üö´ <b>Hai fornito un valore di configurazione non valido.\nErrore: {}</b>"
        ),
        "try_again": "üîÅ Riprova",
        "typehint": "üïµÔ∏è <b>Dovrebbe essere {}</b>",
        "set": "impostare",
        "set_default_btn": "‚ôªÔ∏è Imposta valore di default",
        "enter_value_btn": "‚úçÔ∏è Inserisci valore",
        "enter_value_desc": "‚úçÔ∏è Inserisci il nuovo valore di questo parametro",
        "add_item_desc": "‚úçÔ∏è Inserisci l'elemento che vuoi aggiungere",
        "remove_item_desc": "‚úçÔ∏è Inserisci l'elemento che vuoi rimuovere",
        "back_btn": "üëà Indietro",
        "close_btn": "üîª Chiudi",
        "add_item_btn": "‚ûï Aggiungi elemento",
        "remove_item_btn": "‚ûñ Rimuovi elemento",
        "show_hidden": "üö∏ Mostra valore",
        "hide_value": "üîí Nascondi valore",
        "builtin": "üõ∞ Built-in",
        "external": "üõ∏ Esterni",
        "libraries": "üì¶ Librerie",
    }

    strings_de = {
        "choose_core": "‚öôÔ∏è <b>W√§hle eine Kategorie</b>",
        "configure": "‚öôÔ∏è <b>W√§hle einen Modul zum Konfigurieren</b>",
        "configure_lib": "üì¶ <b>W√§hle eine Bibliothek zum Konfigurieren</b>",
        "configuring_mod": (
            "‚öôÔ∏è <b>W√§hle eine Option f√ºr das Modul</b> <code>{}</code>\n\n<b>Aktuelle"
            " Einstellungen:</b>\n\n{}"
        ),
        "configuring_lib": (
            "üì¶ <b>W√§hle eine Option f√ºr die Bibliothek</b>"
            " <code>{}</code>\n\n<b>Aktuelle Einstellungen:</b>\n\n{}"
        ),
        "configuring_option": (
            "‚öôÔ∏è <b>Optionen verwalten</b> <code>{}</code> <b>f√ºr das Modul"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Standard:"
            " {}</b>\n\n<b>Aktuelle: {}</b>\n\n{}"
        ),
        "configuring_option_lib": (
            "üì¶ <b>Optionen verwalten</b> <code>{}</code> <b>f√ºr die Bibliothek"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Standard:"
            " {}</b>\n\n<b>Aktuelle: {}</b>\n\n{}"
        ),
        "option_saved": (
            "<emoji document_id=5318933532825888187>‚öôÔ∏è</emoji> <b>Option"
            "</b> <code>{}</code> <b>f√ºr das Modul</b> <code>{}</code><b>"
            " gespeichert!</b>\n<b>Aktuelle: {}</b>"
        ),
        "option_saved_lib": (
            "<emoji document_id=5431736674147114227>üì¶</emoji> <b>Option"
            "</b> <code>{}</code> <b>f√ºr die Bibliothek</b> <code>{}</code><b>"
            " gespeichert!</b>\n<b>Aktuelle: {}</b>"
        ),
        "option_reset": (
            "‚ôªÔ∏è <b>Option</b> <code>{}</code> <b>f√ºr das Modul</b> <code>{}</code><b>"
            " auf den Standardwert zur√ºckgesetzt</b>\n<b>Aktuelle: {}</b>"
        ),
        "option_reset_lib": (
            "‚ôªÔ∏è <b>Option</b> <code>{}</code> <b>f√ºr die Bibliothek</b>"
            " <code>{}</code><b> auf den Standardwert zur√ºckgesetzt</b>\n<b>Aktuelle:"
            " {}</b>"
        ),
        "args": "üö´ <b>Ung√ºltige Argumente angegeben</b>",
        "no_mod": "üö´ <b>Modul existiert nicht</b>",
        "no_option": "üö´ <b>Das Modul hat keinen solchen Konfigurationswert</b>",
        "validation_error": (
            "üö´ <b>Ung√ºltiger Konfigurationswert eingegeben.\nFehler: {}</b>"
        ),
        "try_again": "üîÅ Versuch es noch einmal",
        "typehint": "üïµÔ∏è <b>Es sollte {} sein</b>",
        "set": "setzen",
        "set_default_btn": "‚ôªÔ∏è Standardwert",
        "enter_value_btn": "‚úçÔ∏è Wert eingeben",
        "enter_value_desc": "‚úçÔ∏è Gib einen neuen Wert f√ºr diesen Parameter ein",
        "add_item_desc": "‚úçÔ∏è Gib das Element ein, das du hinzuf√ºgen m√∂chtest",
        "remove_item_desc": "‚úçÔ∏è Gib das Element ein, das du entfernen m√∂chtest",
        "back_btn": "üëà Zur√ºck",
        "close_btn": "üîª Schlie√üen",
        "add_item_btn": "‚ûï Element hinzuf√ºgen",
        "remove_item_btn": "‚ûñ Element entfernen",
        "show_hidden": "üö∏ Wert anzeigen",
        "hide_value": "üîí Wert verstecken",
        "builtin": "üõ∞ Ingebaut",
        "external": "üõ∏ Extern",
        "libraries": "üì¶ Bibliotheken",
    }

    strings_uz = {
        "choose_core": "‚öôÔ∏è <b>Qurilmangizni tanlang</b>",
        "configure": "‚öôÔ∏è <b>Sozlamalar uchun modulni tanlang</b>",
        "configure_lib": "üì¶ <b>Sozlamalar uchun kutubxonani tanlang</b>",
        "configuring_mod": (
            "‚öôÔ∏è <b>Modul</b> <code>{}</code> <b>sozlamalari</b>\n\n<b>Joriy"
            " sozlamalar:</b>\n\n{}"
        ),
        "configuring_lib": (
            "üì¶ <b>Kutubxona</b> <code>{}</code> <b>sozlamalari</b>\n\n<b>Joriy"
            " sozlamalar:</b>\n\n{}"
        ),
        "configuring_option": (
            "‚öôÔ∏è <b>Modul</b> <code>{}</code> <b>parametriga</b> <code>{}</code>\n<i>‚ÑπÔ∏è"
            " {}</i>\n\n<b>Standart: {}</b>\n\n<b>Joriy: {}</b>\n\n{}"
        ),
        "configuring_option_lib": (
            "üì¶ <b>Kutubxona</b> <code>{}</code> <b>parametriga</b>"
            " <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Standart: {}</b>\n\n<b>Joriy:"
            " {}</b>\n\n{}"
        ),
        "option_saved": (
            "<emoji document_id=5318933532825888187>‚öôÔ∏è</emoji> <b>Parametr"
            "</b> <code>{}</code> <b>modul</b> <code>{}</code><b>"
            " saqlandi!</b>\n<b>Joriy: {}</b>"
        ),
        "option_saved_lib": (
            "<emoji document_id=5431736674147114227>üì¶</emoji> <b>Parametr"
            "</b> <code>{}</code> <b>kutubxona</b> <code>{}</code><b>"
            " saqlandi!</b>\n<b>Joriy: {}</b>"
        ),
        "option_reset": (
            "‚ôªÔ∏è <b>Parametr</b> <code>{}</code> <b>modul</b> <code>{}</code><b>"
            " standart qiymatiga qaytarildi</b>\n<b>Joriy: {}</b>"
        ),
        "option_reset_lib": (
            "‚ôªÔ∏è <b>Parametr</b> <code>{}</code> <b>kutubxona</b> <code>{}</code><b>"
            " standart qiymatiga qaytarildi</b>\n<b>Joriy: {}</b>"
        ),
        "_cls_doc": "Hikka konfiguratori interaktiv",
        "args": "üö´ <b>Siz noto'g'ri argumentlarni kiritdingiz</b>",
        "no_mod": "üö´ <b>Ushbu modul mavjud emas</b>",
        "no_option": "üö´ <b>Bunday konfiguratsiya qiymati mavjud emas</b>",
        "validation_error": "üö´ <b>Kiritilgan qiymat noto'g'ri.\nXato: {}</b>",
        "try_again": "üîÅ Qayta urinib ko'ring",
        "typehint": "üïµÔ∏è <b>{} bo'lishi kerak</b>",
        "set": "sozlash",
        "set_default_btn": "‚ôªÔ∏è Standart qiymatni o'rnatish",
        "enter_value_btn": "‚úçÔ∏è Qiymatni kiriting",
        "enter_value_desc": "‚úçÔ∏è Ushbu parametrdagi yangi qiymatni kiriting",
        "add_item_desc": "‚úçÔ∏è Qo'shish uchun elementni kiriting",
        "remove_item_desc": "‚úçÔ∏è O'chirish uchun elementni kiriting",
        "back_btn": "üëà Orqaga",
        "close_btn": "üîª Yopish",
        "add_item_btn": "‚ûï Element qo'shish",
        "remove_item_btn": "‚ûñ Elementni o'chirish",
        "show_hidden": "üö∏ Qiymatni ko'rsatish",
        "hide_value": "üîí Qiymatni yashirish",
        "builtin": "üõ∞ Tizimli",
        "external": "üõ∏ Tashqi",
        "libraries": "üì¶ Kutubxonalar",
    }

    strings_tr = {
        "choose_core": "‚öôÔ∏è <b>Mod√ºl se√ß</b>",
        "configure": "‚öôÔ∏è <b>Mod√ºl yapƒ±landƒ±r</b>",
        "configure_lib": "üì¶ <b>K√ºt√ºphaneyi yapƒ±landƒ±r</b>",
        "configuring_mod": (
            "‚öôÔ∏è <b>Mod√ºl√ºn</b> <code>{}</code> <b>parametresini se√ß</b>\n\n<b>Ge√ßerli"
            " ayarlar:</b>\n\n{}"
        ),
        "configuring_lib": (
            "üì¶ <b>K√ºt√ºphanenin</b> <code>{}</code> <b>parametresini"
            " se√ß</b>\n\n<b>Ge√ßerli ayarlar:</b>\n\n{}"
        ),
        "configuring_option": (
            "‚öôÔ∏è <b>Mod√ºl√ºn</b> <code>{}</code> <b>parametresi</b> <code>{}</code>"
            " <b>ayarlarƒ±nƒ± deƒüi≈ütir</b>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Varsayƒ±lan:"
            " {}</b>\n\n<b>Ge√ßerli: {}</b>\n\n{}"
        ),
        "configuring_option_lib": (
            "üì¶ <b>K√ºt√ºphanenin</b> <code>{}</code> <b>parametresi</b> <code>{}</code>"
            " <b>ayarlarƒ±nƒ± deƒüi≈ütir</b>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Varsayƒ±lan:"
            " {}</b>\n\n<b>Ge√ßerli: {}</b>\n\n{}"
        ),
        "option_saved": (
            "<emoji document_id=5318933532825888187>‚öôÔ∏è</emoji> <b>Parametre"
            "</b> <code>{}</code> <b>mod√ºl√ºn√ºn</b> <code>{}</code><b>"
            " kaydedildi!</b>\n<b>Ge√ßerli: {}</b>"
        ),
        "option_saved_lib": (
            "<emoji document_id=5431736674147114227>üì¶</emoji> <b>Parametre"
            "</b> <code>{}</code> <b>k√ºt√ºphanenin</b> <code>{}</code><b>"
            " kaydedildi!</b>\n<b>Ge√ßerli: {}</b>"
        ),
        "option_reset": (
            "‚ôªÔ∏è <b>Parametre</b> <code>{}</code> <b>mod√ºl√ºn√ºn</b> <code>{}</code><b>"
            " varsayƒ±lana sƒ±fƒ±rlandƒ±</b>\n<b>Ge√ßerli: {}</b>"
        ),
        "option_reset_lib": (
            "‚ôªÔ∏è <b>Parametre</b> <code>{}</code> <b>k√ºt√ºphanenin</b> <code>{}</code><b>"
            " varsayƒ±lana sƒ±fƒ±rlandƒ±</b>\n<b>Ge√ßerli: {}</b>"
        ),
        "_cls_doc": "Hikka Interactive Configurater",
        "args": "üö´ <b>ƒ∞stediƒüiniz argumanlarƒ± yanlƒ±≈ü girdiniz</b>",
        "no_mod": "üö´ <b>Mod√ºl mevcut deƒüil</b>",
        "no_option": "üö´ <b>Mod√ºlde b√∂yle bir ayar yok</b>",
        "validation_error": "üö´ <b>Yanlƒ±≈ü bir ayar girdiniz.\nHata: {}</b>",
        "try_again": "üîÅ Tekrar deneyin",
        "typehint": "üïµÔ∏è <b>{} olmalƒ±</b>",
        "set": "ayarla",
        "set_default_btn": "‚ôªÔ∏è Varsayƒ±lan ayar",
        "enter_value_btn": "‚úçÔ∏è Deƒüer girin",
        "enter_value_desc": "‚úçÔ∏è Yeni bu parametrenin deƒüerini girin",
        "add_item_desc": "‚úçÔ∏è Eklemek i√ßin √∂ƒüeyi girin",
        "remove_item_desc": "‚úçÔ∏è Silinecek √∂ƒüeyi girin",
        "back_btn": "üëà Geri d√∂n",
        "close_btn": "üîª Kapat",
        "add_item_btn": "‚ûï √ñƒüe ekle",
        "remove_item_btn": "‚ûñ √ñƒüe sil",
        "show_hidden": "üö∏ Deƒüer G√∂ster",
        "hide_value": "üîí Deƒüeri Gizle",
        "builtin": "üõ∞ Dahili",
        "external": "üõ∏ Dƒ±≈ü",
        "libraries": "üì¶ Kitaplƒ±klar",
    }

    strings_es = {
        "choose_core": "‚öôÔ∏è <b>Elige una categor√≠a</b>",
        "configure": "‚öôÔ∏è <b>Elige un m√≥dulo para configurar</b>",
        "configure_lib": "üì¶ <b>Elige una librer√≠a para configurar</b>",
        "configuring_mod": (
            "‚öôÔ∏è <b>Elige una opci√≥n para el m√≥dulo</b>"
            " <code>{}</code>\n\n<b>Configuraci√≥n actual:</b>\n\n{}"
        ),
        "configuring_lib": (
            "üì¶ <b>Elige una opci√≥n para la librer√≠a</b>"
            " <code>{}</code>\n\n<b>Configuraci√≥n actual:</b>\n\n{}"
        ),
        "configuring_option": (
            "‚öôÔ∏è <b>Administra la opci√≥n</b> <code>{}</code> <b>del m√≥dulo"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Predeterminado:"
            " {}</b>\n\n<b>Actual: {}</b>\n\n{}"
        ),
        "configuring_option_lib": (
            "üì¶ <b>Administra la opci√≥n</b> <code>{}</code> <b>de la librer√≠a"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>Predeterminado:"
            " {}</b>\n\n<b>Actual: {}</b>\n\n{}"
        ),
        "option_saved": (
            "<emoji document_id=5318933532825888187>‚öôÔ∏è</emoji> <b>La opci√≥n"
            "</b> <code>{}</code> <b>del m√≥dulo</b> <code>{}</code><b>"
            " ha sido guardada!</b>\n<b>Actual: {}</b>"
        ),
        "option_saved_lib": (
            "<emoji document_id=5431736674147114227>üì¶</emoji> <b>La opci√≥n"
            "</b> <code>{}</code> <b>de la librer√≠a</b> <code>{}</code><b>"
            " ha sido guardada!</b>\n<b>Actual: {}</b>"
        ),
        "option_reset": (
            "‚ôªÔ∏è <b>La opci√≥n</b> <code>{}</code> <b>del m√≥dulo</b> <code>{}</code><b>"
            " ha sido restablecida al valor predeterminado</b>\n<b>Actual: {}</b>"
        ),
        "option_reset_lib": (
            "‚ôªÔ∏è <b>La opci√≥n</b> <code>{}</code> <b>de la librer√≠a</b>"
            " <code>{}</code><b> ha sido restablecida al valor"
            " predeterminado</b>\n<b>Actual: {}</b>"
        ),
        "_cls_doc": "Configurador interactivo Hikka",
        "args": "üö´ <b>Has especificado argumentos incorrectos</b>",
        "no_mod": "üö´ <b>El m√≥dulo no existe</b>",
        "no_option": "üö´ <b>El m√≥dulo no tiene esta configuraci√≥n</b>",
        "validation_error": (
            "üö´ <b>Has especificado un valor incorrecto para esta configuraci√≥n.\nError:"
            " {}</b>"
        ),
        "try_again": "üîÅ Intentar de nuevo",
        "typehint": "üïµÔ∏è <b>Debe ser {}</b>",
        "set": "establecer",
        "set_default_btn": "‚ôªÔ∏è Valor predeterminado",
        "enter_value_btn": "‚úçÔ∏è Ingresar valor",
        "enter_value_desc": "‚úçÔ∏è Ingresa el nuevo valor de esta configuraci√≥n",
        "add_item_desc": "‚úçÔ∏è Ingresa el elemento que deseas agregar",
        "remove_item_desc": "‚úçÔ∏è Ingresa el elemento que deseas eliminar",
        "back_btn": "üëà Atr√°s",
        "close_btn": "üîª Cerrar",
        "add_item_btn": "‚ûï Agregar elemento",
        "remove_item_btn": "‚ûñ Eliminar elemento",
        "show_hidden": "üö∏ Mostrar valor",
        "hide_value": "üîí Ocultar valor",
        "builtin": "üõ∞ Interno",
        "external": "üõ∏ Externo",
        "libraries": "üì¶ Librer√≠as",
    }

    strings_kk = {
        "choose_core": "‚öôÔ∏è <b>–¢–∞“õ—ã—Ä—ã–ø—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑</b>",
        "configure": "‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–ª–∞–Ω–∞—Ç—ã–Ω –º–æ–¥—É–ª—å–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑</b>",
        "configure_lib": "üì¶ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–ª–∞–Ω–∞—Ç—ã–Ω –∫—ñ—Ç–∞–ø—Ö–∞–Ω–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑</b>",
        "configuring_mod": (
            "‚öôÔ∏è <b>–ú–æ–¥—É–ª—å</b> <code>{}</code> <b>“Ø—à—ñ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–Ω"
            " —Ç–∞“£–¥–∞“£—ã–∑</b>\n\n<b>–ê“ì—ã–º–¥–∞“ì—ã –±–∞–ø—Ç–∞—É–ª–∞—Ä:</b>\n\n{}"
        ),
        "configuring_lib": (
            "üì¶ <b>–ö—ñ—Ç–∞–ø—Ö–∞–Ω–∞</b> <code>{}</code> <b>“Ø—à—ñ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–Ω"
            " —Ç–∞“£–¥–∞“£—ã–∑</b>\n\n<b>–ê“ì—ã–º–¥–∞“ì—ã –±–∞–ø—Ç–∞—É–ª–∞—Ä:</b>\n\n{}"
        ),
        "configuring_option": (
            "‚öôÔ∏è <b>–ú–æ–¥—É–ª—å</b> <code>{}</code> <b>“Ø—à—ñ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–Ω</b> <code>{}</code><b>"
            " –±–∞—Å“õ–∞—Ä—ã“£—ã–∑</b>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>”ò–¥–µ–ø–∫—ñ:"
            " {}</b>\n\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>\n\n{}"
        ),
        "configuring_option_lib": (
            "üì¶ <b>–ö—ñ—Ç–∞–ø—Ö–∞–Ω–∞</b> <code>{}</code> <b>“Ø—à—ñ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–Ω</b>"
            " <code>{}</code><b> –±–∞—Å“õ–∞—Ä—ã“£—ã–∑</b>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>”ò–¥–µ–ø–∫—ñ:"
            " {}</b>\n\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>\n\n{}"
        ),
        "option_saved": (
            "<emoji document_id=5318933532825888187>‚öôÔ∏è</emoji> <b>–ú–æ–¥—É–ª—å</b>"
            " <code>{}</code><b> –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ</b> <code>{}</code><b>"
            " —Å–∞“õ—Ç–∞–ª–¥—ã!</b>\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>"
        ),
        "option_saved_lib": (
            "<emoji document_id=5431736674147114227>üì¶</emoji> <b>–ö—ñ—Ç–∞–ø—Ö–∞–Ω–∞</b>"
            " <code>{}</code><b> –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ</b> <code>{}</code><b>"
            " —Å–∞“õ—Ç–∞–ª–¥—ã!</b>\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>"
        ),
        "option_reset": (
            "‚ôªÔ∏è <b>–ú–æ–¥—É–ª—å</b> <code>{}</code><b> –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ</b> <code>{}</code><b>"
            " –±–∞—Å—Ç–∞–ø“õ—ã —Ä–µ—Ç—ñ–Ω–µ “õ–∞–π—Ç–∞—Ä—ã–ª–¥—ã</b>\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>"
        ),
        "option_reset_lib": (
            "‚ôªÔ∏è <b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞</b> <code>{}</code><b> –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ</b> <code>{}</code><b>"
            " –±–∞—Å—Ç–∞–ø“õ—ã —Ä–µ—Ç—ñ–Ω–µ “õ–∞–π—Ç–∞—Ä—ã–ª–¥—ã</b>\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>"
        ),
        "_cls_doc": "Hikka –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—ñ–ª—ñ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Å—ã",
        "args": "üö´ <b>–°—ñ–∑ –¥“±—Ä—ã—Å –µ–º–µ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—Ç—ñ“£—ñ–∑</b>",
        "no_mod": "üö´ <b>–ú–æ–¥—É–ª—å –∂–æ“õ</b>",
        "no_option": "üö´ <b>–ú–æ–¥—É–ª—å–¥—ñ“£ –±“±–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ –∂–æ“õ</b>",
        "validation_error": (
            "üö´ <b>–î“±—Ä—ã—Å –µ–º–µ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–Ω –µ–Ω–≥—ñ–∑–¥—ñ“£—ñ–∑.\n–•–∞—Ç–∞: {}</b>"
        ),
        "try_again": "üîÅ “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑",
        "typehint": "üïµÔ∏è <b>{} –±–æ–ª—É—ã –∫–µ—Ä–µ–∫</b>",
        "set": "–û—Ä–Ω–∞—Ç—É",
        "set_default_btn": "‚ôªÔ∏è –ë–∞—Å—Ç–∞–ø“õ—ã —Ä–µ—Ç",
        "enter_value_btn": "‚úçÔ∏è –ú”ô–Ω–¥—ñ –µ–Ω–≥—ñ–∑—É",
        "enter_value_desc": "‚úçÔ∏è –ë“±–ª –ø–∞—Ä–∞–º–µ—Ç—Ä–¥—ñ“£ –∂–∞“£–∞ –º”ô–Ω—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑",
        "add_item_desc": "‚úçÔ∏è “ö–æ—Å—ã–ª—É—ã –∫–µ—Ä–µ–∫ —ç–ª–µ–º–µ–Ω—Ç—Ç—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑",
        "remove_item_desc": "‚úçÔ∏è –ñ–æ—é—ã –∫–µ—Ä–µ–∫ —ç–ª–µ–º–µ–Ω—Ç—Ç—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑",
        "back_btn": "üëà –ê—Ä—Ç“õ–∞",
        "close_btn": "üîª –ñ–∞–±—É",
        "add_item_btn": "‚ûï –≠–ª–µ–º–µ–Ω—Ç—Ç—ñ “õ–æ—Å—É",
        "remove_item_btn": "‚ûñ –≠–ª–µ–º–µ–Ω—Ç—Ç—ñ –∂–æ—é",
        "show_hidden": "üö∏ –ú”ô–Ω–¥—ñ –∫”©—Ä—Å–µ—Ç—É",
        "hide_value": "üîí –ú”ô–Ω–¥—ñ –∂–∞—Å—ã—Ä—É",
        "builtin": "üõ∞ “ö“±—Ä—ã–ª“ì—ã",
        "external": "üõ∏ –°—ã—Ä—Ç“õ—ã",
        "libraries": "üì¶ –ö—ñ—Ç–∞–ø—Ö–∞–Ω–∞–ª–∞—Ä",
    }

    strings_tt = {
        "choose_core": "‚öôÔ∏è <b>–¢–∞“£–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è</b>",
        "configure": "‚öôÔ∏è <b>–¢–∞“£–¥–∞ –º–æ–¥—É–ª—å–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b>",
        "configure_lib": "üì¶ <b>–¢–∞“£–¥–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b>",
        "configuring_mod": (
            "‚öôÔ∏è <b>–¢–∞“£–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–¥—É–ª—è</b> <code>{}</code>\n\n<b>–ê“ì—ã–º–¥–∞“ì—ã"
            " –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n\n{}"
        ),
        "configuring_lib": (
            "üì¶ <b>–¢–∞“£–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∞</b> <code>{}</code>\n\n<b>–ê“ì—ã–º–¥–∞“ì—ã"
            " –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n\n{}"
        ),
        "configuring_option": (
            "‚öôÔ∏è <b>–ö–µ—Ä—Ç“Ø –ø–∞—Ä–∞–º–µ—Ç—Ä</b> <code>{}</code> <b>–º–æ–¥—É–ª—å"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã:"
            " {}</b>\n\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>\n\n{}"
        ),
        "configuring_option_lib": (
            "üì¶ <b>–ö–µ—Ä—Ç“Ø –ø–∞—Ä–∞–º–µ—Ç—Ä</b> <code>{}</code> <b>–±–∏–±–ª–∏–æ—Ç–µ–∫–∞"
            "</b> <code>{}</code>\n<i>‚ÑπÔ∏è {}</i>\n\n<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã:"
            " {}</b>\n\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>\n\n{}"
        ),
        "option_saved": (
            "<emoji document_id=5318933532825888187>‚öôÔ∏è</emoji> <b>–ü–∞—Ä–∞–º–µ—Ç—Ä"
            "</b> <code>{}</code> <b>–º–æ–¥—É–ª—å</b> <code>{}</code><b>"
            " —Å–∞“õ—Ç–∞–ª–¥—ã!</b>\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>"
        ),
        "option_saved_lib": (
            "<emoji document_id=5431736674147114227>üì¶</emoji> <b>–ü–∞—Ä–∞–º–µ—Ç—Ä"
            "</b> <code>{}</code> <b>–±–∏–±–ª–∏–æ—Ç–µ–∫–∞</b> <code>{}</code><b>"
            " —Å–∞“õ—Ç–∞–ª–¥—ã!</b>\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>"
        ),
        "option_reset": (
            "‚ôªÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä</b> <code>{}</code> <b>–º–æ–¥—É–ª—å</b> <code>{}</code><b>"
            " –∞–ª—ã–Ω“ì–∞–Ω –∫“Ø–π–¥–µ –∫–∞–π—Ç–∞—Ä—ã–ª–¥—ã</b>\n<b>–ê“ì—ã–º–¥–∞“ì—ã: {}</b>"
        ),
        "option_reset_lib": (
            "‚ôªÔ∏è <b>–ö”©–π–ª”ô–Ω–µ—à</b> <code>{}</code> <b>–ª”ô–±–∑”ô</b> <code>{}</code><b>"
            " –∫–∞–π—Ç–∞—Ä—ã–ª–¥—ã</b>\n<b>–ê–≥—ã–º–¥–∞: {}</b>"
        ),
        "_cls_doc": "Hikka –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Å–µ",
        "args": "üö´ <b>–ö”©–π–ª”ô–Ω–µ—à–Ω–µ“£ –¥”©—Ä–µ—Å –±—É–ª–º–∞–≥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–∞—Ä—ã –±–∞—Ä</b>",
        "no_mod": "üö´ <b>–ú–æ–¥—É–ª—å–Ω–µ —Ç–∞–±—ã–ø –±—É–ª–º–∞–¥—ã–º</b>",
        "no_option": (
            "üö´ <b>–ö”©–π–ª”ô–Ω–µ—à–Ω–µ“£ –±—É –º–æ–¥—É–ª—å–¥–∞ –º”©–º–∫–∏–Ω –±—É–ª–º–∞–≥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–∞—Ä—ã –±–∞—Ä</b>"
        ),
        "validation_error": (
            "üö´ <b>–ö”©–π–ª”ô–Ω–µ—à–Ω–µ“£ –¥”©—Ä–µ—Å –±—É–ª–º–∞–≥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–∞—Ä—ã –±–∞—Ä.\n–û—à–∏–±–∫–∞: {}</b>"
        ),
        "try_again": "üîÅ –¢–∞–≥—ã–Ω –∫–∞–±–∞—Ç–ª–∞—É",
        "typehint": "üïµÔ∏è <b>{} –±—É–ª—ã—Ä–≥–∞ —Ç–∏–µ—à</b>",
        "set": "–∫“Ø—Ä—Å”ô—Ç–µ—Ä–≥”ô",
        "set_default_btn": "‚ôªÔ∏è –ö”©–π–ª”ô–Ω–µ—à–Ω–µ“£ –∫–∏–ª–µ—à–µ –∫”©–π–ª”ô–Ω–µ—à–µ",
        "enter_value_btn": "‚úçÔ∏è –ö”©–π–ª”ô–Ω–µ—à–Ω–µ“£ —è“£–∞ –∫”©–π–ª”ô–Ω–µ—à–µ",
        "enter_value_desc": "‚úçÔ∏è –ú–æ–¥—É–ª—å–Ω–µ“£ –∫”©–π–ª”ô–Ω–µ—à–Ω–µ“£ —è“£–∞ –∫”©–π–ª”ô–Ω–µ—à–µ",
        "add_item_desc": "‚úçÔ∏è –ï–ª–µ–º–µ–Ω—Ç–Ω–µ –∫–µ—Ä—Ç–µ–≥–µ–∑",
        "remove_item_desc": "‚úçÔ∏è –ï–ª–µ–º–µ–Ω—Ç–Ω–µ –∫–∞–π—Ç–∞—Ä—ã–≥—ã–∑",
        "back_btn": "üëà –ê—Ä—Ç–∫–∞",
        "close_btn": "üîª –Ø–±—É",
        "add_item_btn": "‚ûï –ï–ª–µ–º–µ–Ω—Ç–Ω–µ –∫–µ—Ä—Ç“Ø",
        "remove_item_btn": "‚ûñ –ï–ª–µ–º–µ–Ω—Ç–Ω–µ –∫–∞–π—Ç–∞—Ä—É",
        "show_hidden": "üö∏ –ö”©–π–ª”ô–Ω–µ—à–Ω–µ –∫“Ø—Ä—Å”ô—Ç–µ—Ä–≥”ô",
        "hide_value": "üîí –ö”©–π–ª”ô–Ω–µ—à–Ω–µ —è—à–µ—Ä–µ—Ä–≥”ô",
        "builtin": "üõ∞ –Ø—Å–∞–ª–≥–∞–Ω",
        "external": "üõ∏ –°—ã—Ä—Ç–∫—ã",
        "libraries": "üì¶ –õ”ô–±–∑”ô–ª”ô—Ä",
    }

    _row_size = 3
    _num_rows = 5

    @staticmethod
    def prep_value(value: typing.Any) -> typing.Any:
        if isinstance(value, str):
            return f"</b><code>{utils.escape_html(value.strip())}</code><b>"

        if isinstance(value, list) and value:
            return (
                "</b><code>[</code>\n    "
                + "\n    ".join(
                    [f"<code>{utils.escape_html(str(item))}</code>" for item in value]
                )
                + "\n<code>]</code><b>"
            )

        return f"</b><code>{utils.escape_html(value)}</code><b>"

    def hide_value(self, value: typing.Any) -> str:
        if isinstance(value, list) and value:
            return self.prep_value(["*" * len(str(i)) for i in value])

        return self.prep_value("*" * len(str(value)))

    def _get_value(self, mod: str, option: str) -> str:
        return (
            self.prep_value(self.lookup(mod).config[option])
            if (
                not self.lookup(mod).config._config[option].validator
                or self.lookup(mod).config._config[option].validator.internal_id
                != "Hidden"
            )
            else self.hide_value(self.lookup(mod).config[option])
        )

    async def inline__set_config(
        self,
        call: InlineCall,
        query: str,
        mod: str,
        option: str,
        inline_message_id: str,
        obj_type: typing.Union[bool, str] = False,
    ):
        try:
            self.lookup(mod).config[option] = query
        except loader.validators.ValidationError as e:
            await call.edit(
                self.strings("validation_error").format(e.args[0]),
                reply_markup={
                    "text": self.strings("try_again"),
                    "callback": self.inline__configure_option,
                    "args": (mod, option),
                    "kwargs": {"obj_type": obj_type},
                },
            )
            return

        await call.edit(
            self.strings(
                "option_saved" if isinstance(obj_type, bool) else "option_saved_lib"
            ).format(
                utils.escape_html(option),
                utils.escape_html(mod),
                self._get_value(mod, option),
            ),
            reply_markup=[
                [
                    {
                        "text": self.strings("back_btn"),
                        "callback": self.inline__configure,
                        "args": (mod,),
                        "kwargs": {"obj_type": obj_type},
                    },
                    {"text": self.strings("close_btn"), "action": "close"},
                ]
            ],
            inline_message_id=inline_message_id,
        )

    async def inline__reset_default(
        self,
        call: InlineCall,
        mod: str,
        option: str,
        obj_type: typing.Union[bool, str] = False,
    ):
        mod_instance = self.lookup(mod)
        mod_instance.config[option] = mod_instance.config.getdef(option)

        await call.edit(
            self.strings(
                "option_reset" if isinstance(obj_type, bool) else "option_reset_lib"
            ).format(
                utils.escape_html(option),
                utils.escape_html(mod),
                self._get_value(mod, option),
            ),
            reply_markup=[
                [
                    {
                        "text": self.strings("back_btn"),
                        "callback": self.inline__configure,
                        "args": (mod,),
                        "kwargs": {"obj_type": obj_type},
                    },
                    {"text": self.strings("close_btn"), "action": "close"},
                ]
            ],
        )

    async def inline__set_bool(
        self,
        call: InlineCall,
        mod: str,
        option: str,
        value: bool,
        obj_type: typing.Union[bool, str] = False,
    ):
        try:
            self.lookup(mod).config[option] = value
        except loader.validators.ValidationError as e:
            await call.edit(
                self.strings("validation_error").format(e.args[0]),
                reply_markup={
                    "text": self.strings("try_again"),
                    "callback": self.inline__configure_option,
                    "args": (mod, option),
                    "kwargs": {"obj_type": obj_type},
                },
            )
            return

        validator = self.lookup(mod).config._config[option].validator
        doc = utils.escape_html(
            next(
                (
                    validator.doc[lang]
                    for lang in self._db.get(translations.__name__, "lang", "en").split(
                        " "
                    )
                    if lang in validator.doc
                ),
                validator.doc["en"],
            )
        )

        await call.edit(
            self.strings(
                "configuring_option"
                if isinstance(obj_type, bool)
                else "configuring_option_lib"
            ).format(
                utils.escape_html(option),
                utils.escape_html(mod),
                utils.escape_html(self.lookup(mod).config.getdoc(option)),
                self.prep_value(self.lookup(mod).config.getdef(option)),
                (
                    self.prep_value(self.lookup(mod).config[option])
                    if not validator or validator.internal_id != "Hidden"
                    else self.hide_value(self.lookup(mod).config[option])
                ),
                (
                    self.strings("typehint").format(
                        doc,
                        eng_art="n" if doc.lower().startswith(tuple("euioay")) else "",
                    )
                    if doc
                    else ""
                ),
            ),
            reply_markup=self._generate_bool_markup(mod, option, obj_type),
        )

        await call.answer("‚úÖ")

    def _generate_bool_markup(
        self,
        mod: str,
        option: str,
        obj_type: typing.Union[bool, str] = False,
    ) -> list:
        return [
            [
                *(
                    [
                        {
                            "text": f"‚ùå {self.strings('set')} `False`",
                            "callback": self.inline__set_bool,
                            "args": (mod, option, False),
                            "kwargs": {"obj_type": obj_type},
                        }
                    ]
                    if self.lookup(mod).config[option]
                    else [
                        {
                            "text": f"‚úÖ {self.strings('set')} `True`",
                            "callback": self.inline__set_bool,
                            "args": (mod, option, True),
                            "kwargs": {"obj_type": obj_type},
                        }
                    ]
                )
            ],
            [
                *(
                    [
                        {
                            "text": self.strings("set_default_btn"),
                            "callback": self.inline__reset_default,
                            "args": (mod, option),
                            "kwargs": {"obj_type": obj_type},
                        }
                    ]
                    if self.lookup(mod).config[option]
                    != self.lookup(mod).config.getdef(option)
                    else []
                )
            ],
            [
                {
                    "text": self.strings("back_btn"),
                    "callback": self.inline__configure,
                    "args": (mod,),
                    "kwargs": {"obj_type": obj_type},
                },
                {"text": self.strings("close_btn"), "action": "close"},
            ],
        ]

    async def inline__add_item(
        self,
        call: InlineCall,
        query: str,
        mod: str,
        option: str,
        inline_message_id: str,
        obj_type: typing.Union[bool, str] = False,
    ):
        try:
            with contextlib.suppress(Exception):
                query = ast.literal_eval(query)

            if isinstance(query, (set, tuple)):
                query = list(query)

            if not isinstance(query, list):
                query = [query]

            self.lookup(mod).config[option] = self.lookup(mod).config[option] + query
        except loader.validators.ValidationError as e:
            await call.edit(
                self.strings("validation_error").format(e.args[0]),
                reply_markup={
                    "text": self.strings("try_again"),
                    "callback": self.inline__configure_option,
                    "args": (mod, option),
                    "kwargs": {"obj_type": obj_type},
                },
            )
            return

        await call.edit(
            self.strings(
                "option_saved" if isinstance(obj_type, bool) else "option_saved_lib"
            ).format(
                utils.escape_html(option),
                utils.escape_html(mod),
                self._get_value(mod, option),
            ),
            reply_markup=[
                [
                    {
                        "text": self.strings("back_btn"),
                        "callback": self.inline__configure,
                        "args": (mod,),
                        "kwargs": {"obj_type": obj_type},
                    },
                    {"text": self.strings("close_btn"), "action": "close"},
                ]
            ],
            inline_message_id=inline_message_id,
        )

    async def inline__remove_item(
        self,
        call: InlineCall,
        query: str,
        mod: str,
        option: str,
        inline_message_id: str,
        obj_type: typing.Union[bool, str] = False,
    ):
        try:
            with contextlib.suppress(Exception):
                query = ast.literal_eval(query)

            if isinstance(query, (set, tuple)):
                query = list(query)

            if not isinstance(query, list):
                query = [query]

            query = list(map(str, query))

            old_config_len = len(self.lookup(mod).config[option])

            self.lookup(mod).config[option] = [
                i for i in self.lookup(mod).config[option] if str(i) not in query
            ]

            if old_config_len == len(self.lookup(mod).config[option]):
                raise loader.validators.ValidationError(
                    f"Nothing from passed value ({self.prep_value(query)}) is not in"
                    " target list"
                )
        except loader.validators.ValidationError as e:
            await call.edit(
                self.strings("validation_error").format(e.args[0]),
                reply_markup={
                    "text": self.strings("try_again"),
                    "callback": self.inline__configure_option,
                    "args": (mod, option),
                    "kwargs": {"obj_type": obj_type},
                },
            )
            return

        await call.edit(
            self.strings(
                "option_saved" if isinstance(obj_type, bool) else "option_saved_lib"
            ).format(
                utils.escape_html(option),
                utils.escape_html(mod),
                self._get_value(mod, option),
            ),
            reply_markup=[
                [
                    {
                        "text": self.strings("back_btn"),
                        "callback": self.inline__configure,
                        "args": (mod,),
                        "kwargs": {"obj_type": obj_type},
                    },
                    {"text": self.strings("close_btn"), "action": "close"},
                ]
            ],
            inline_message_id=inline_message_id,
        )

    def _generate_series_markup(
        self,
        call: InlineCall,
        mod: str,
        option: str,
        obj_type: typing.Union[bool, str] = False,
    ) -> list:
        return [
            [
                {
                    "text": self.strings("enter_value_btn"),
                    "input": self.strings("enter_value_desc"),
                    "handler": self.inline__set_config,
                    "args": (mod, option, call.inline_message_id),
                    "kwargs": {"obj_type": obj_type},
                }
            ],
            [
                *(
                    [
                        {
                            "text": self.strings("remove_item_btn"),
                            "input": self.strings("remove_item_desc"),
                            "handler": self.inline__remove_item,
                            "args": (mod, option, call.inline_message_id),
                            "kwargs": {"obj_type": obj_type},
                        },
                        {
                            "text": self.strings("add_item_btn"),
                            "input": self.strings("add_item_desc"),
                            "handler": self.inline__add_item,
                            "args": (mod, option, call.inline_message_id),
                            "kwargs": {"obj_type": obj_type},
                        },
                    ]
                    if self.lookup(mod).config[option]
                    else []
                ),
            ],
            [
                *(
                    [
                        {
                            "text": self.strings("set_default_btn"),
                            "callback": self.inline__reset_default,
                            "args": (mod, option),
                            "kwargs": {"obj_type": obj_type},
                        }
                    ]
                    if self.lookup(mod).config[option]
                    != self.lookup(mod).config.getdef(option)
                    else []
                )
            ],
            [
                {
                    "text": self.strings("back_btn"),
                    "callback": self.inline__configure,
                    "args": (mod,),
                    "kwargs": {"obj_type": obj_type},
                },
                {"text": self.strings("close_btn"), "action": "close"},
            ],
        ]

    async def _choice_set_value(
        self,
        call: InlineCall,
        mod: str,
        option: str,
        value: bool,
        obj_type: typing.Union[bool, str] = False,
    ):
        try:
            self.lookup(mod).config[option] = value
        except loader.validators.ValidationError as e:
            await call.edit(
                self.strings("validation_error").format(e.args[0]),
                reply_markup={
                    "text": self.strings("try_again"),
                    "callback": self.inline__configure_option,
                    "args": (mod, option),
                    "kwargs": {"obj_type": obj_type},
                },
            )
            return

        await call.edit(
            self.strings(
                "option_saved" if isinstance(obj_type, bool) else "option_saved_lib"
            ).format(
                utils.escape_html(option),
                utils.escape_html(mod),
                self._get_value(mod, option),
            ),
            reply_markup=[
                [
                    {
                        "text": self.strings("back_btn"),
                        "callback": self.inline__configure,
                        "args": (mod,),
                        "kwargs": {"obj_type": obj_type},
                    },
                    {"text": self.strings("close_btn"), "action": "close"},
                ]
            ],
        )

        await call.answer("‚úÖ")

    async def _multi_choice_set_value(
        self,
        call: InlineCall,
        mod: str,
        option: str,
        value: bool,
        obj_type: typing.Union[bool, str] = False,
    ):
        try:
            if value in self.lookup(mod).config._config[option].value:
                self.lookup(mod).config._config[option].value.remove(value)
            else:
                self.lookup(mod).config._config[option].value += [value]

            self.lookup(mod).config.reload()
        except loader.validators.ValidationError as e:
            await call.edit(
                self.strings("validation_error").format(e.args[0]),
                reply_markup={
                    "text": self.strings("try_again"),
                    "callback": self.inline__configure_option,
                    "args": (mod, option),
                    "kwargs": {"obj_type": obj_type},
                },
            )
            return

        await self.inline__configure_option(call, mod, option, False, obj_type)
        await call.answer("‚úÖ")

    def _generate_choice_markup(
        self,
        call: InlineCall,
        mod: str,
        option: str,
        obj_type: typing.Union[bool, str] = False,
    ) -> list:
        possible_values = list(
            self.lookup(mod)
            .config._config[option]
            .validator.validate.keywords["possible_values"]
        )
        return [
            [
                {
                    "text": self.strings("enter_value_btn"),
                    "input": self.strings("enter_value_desc"),
                    "handler": self.inline__set_config,
                    "args": (mod, option, call.inline_message_id),
                    "kwargs": {"obj_type": obj_type},
                }
            ],
            *utils.chunks(
                [
                    {
                        "text": (
                            f"{'‚òëÔ∏è' if self.lookup(mod).config[option] == value else 'üîò'} "
                            f"{value if len(str(value)) < 20 else str(value)[:20]}"
                        ),
                        "callback": self._choice_set_value,
                        "args": (mod, option, value, obj_type),
                    }
                    for value in possible_values
                ],
                2,
            )[
                : (
                    6
                    if self.lookup(mod).config[option]
                    != self.lookup(mod).config.getdef(option)
                    else 7
                )
            ],
            [
                *(
                    [
                        {
                            "text": self.strings("set_default_btn"),
                            "callback": self.inline__reset_default,
                            "args": (mod, option),
                            "kwargs": {"obj_type": obj_type},
                        }
                    ]
                    if self.lookup(mod).config[option]
                    != self.lookup(mod).config.getdef(option)
                    else []
                )
            ],
            [
                {
                    "text": self.strings("back_btn"),
                    "callback": self.inline__configure,
                    "args": (mod,),
                    "kwargs": {"obj_type": obj_type},
                },
                {"text": self.strings("close_btn"), "action": "close"},
            ],
        ]

    def _generate_multi_choice_markup(
        self,
        call: InlineCall,
        mod: str,
        option: str,
        obj_type: typing.Union[bool, str] = False,
    ) -> list:
        possible_values = list(
            self.lookup(mod)
            .config._config[option]
            .validator.validate.keywords["possible_values"]
        )
        return [
            [
                {
                    "text": self.strings("enter_value_btn"),
                    "input": self.strings("enter_value_desc"),
                    "handler": self.inline__set_config,
                    "args": (mod, option, call.inline_message_id),
                    "kwargs": {"obj_type": obj_type},
                }
            ],
            *utils.chunks(
                [
                    {
                        "text": (
                            f"{'‚òëÔ∏è' if value in self.lookup(mod).config[option] else '‚óªÔ∏è'} "
                            f"{value if len(str(value)) < 20 else str(value)[:20]}"
                        ),
                        "callback": self._multi_choice_set_value,
                        "args": (mod, option, value, obj_type),
                    }
                    for value in possible_values
                ],
                2,
            )[
                : (
                    6
                    if self.lookup(mod).config[option]
                    != self.lookup(mod).config.getdef(option)
                    else 7
                )
            ],
            [
                *(
                    [
                        {
                            "text": self.strings("set_default_btn"),
                            "callback": self.inline__reset_default,
                            "args": (mod, option),
                            "kwargs": {"obj_type": obj_type},
                        }
                    ]
                    if self.lookup(mod).config[option]
                    != self.lookup(mod).config.getdef(option)
                    else []
                )
            ],
            [
                {
                    "text": self.strings("back_btn"),
                    "callback": self.inline__configure,
                    "args": (mod,),
                    "kwargs": {"obj_type": obj_type},
                },
                {"text": self.strings("close_btn"), "action": "close"},
            ],
        ]

    async def inline__configure_option(
        self,
        call: InlineCall,
        mod: str,
        config_opt: str,
        force_hidden: bool = False,
        obj_type: typing.Union[bool, str] = False,
    ):
        module = self.lookup(mod)
        args = [
            utils.escape_html(config_opt),
            utils.escape_html(mod),
            utils.escape_html(module.config.getdoc(config_opt)),
            self.prep_value(module.config.getdef(config_opt)),
            (
                self.prep_value(module.config[config_opt])
                if not module.config._config[config_opt].validator
                or module.config._config[config_opt].validator.internal_id != "Hidden"
                or force_hidden
                else self.hide_value(module.config[config_opt])
            ),
        ]

        if (
            module.config._config[config_opt].validator
            and module.config._config[config_opt].validator.internal_id == "Hidden"
        ):
            additonal_button_row = (
                [
                    [
                        {
                            "text": self.strings("hide_value"),
                            "callback": self.inline__configure_option,
                            "args": (mod, config_opt, False),
                            "kwargs": {"obj_type": obj_type},
                        }
                    ]
                ]
                if force_hidden
                else [
                    [
                        {
                            "text": self.strings("show_hidden"),
                            "callback": self.inline__configure_option,
                            "args": (mod, config_opt, True),
                            "kwargs": {"obj_type": obj_type},
                        }
                    ]
                ]
            )
        else:
            additonal_button_row = []

        try:
            validator = module.config._config[config_opt].validator
            doc = utils.escape_html(
                next(
                    (
                        validator.doc[lang]
                        for lang in self._db.get(
                            translations.__name__, "lang", "en"
                        ).split(" ")
                        if lang in validator.doc
                    ),
                    validator.doc["en"],
                )
            )
        except Exception:
            doc = None
            validator = None
            args += [""]
        else:
            args += [
                self.strings("typehint").format(
                    doc,
                    eng_art="n" if doc.lower().startswith(tuple("euioay")) else "",
                )
            ]
            if validator.internal_id == "Boolean":
                await call.edit(
                    self.strings(
                        "configuring_option"
                        if isinstance(obj_type, bool)
                        else "configuring_option_lib"
                    ).format(*args),
                    reply_markup=additonal_button_row
                    + self._generate_bool_markup(mod, config_opt, obj_type),
                )
                return

            if validator.internal_id == "Series":
                await call.edit(
                    self.strings(
                        "configuring_option"
                        if isinstance(obj_type, bool)
                        else "configuring_option_lib"
                    ).format(*args),
                    reply_markup=additonal_button_row
                    + self._generate_series_markup(call, mod, config_opt, obj_type),
                )
                return

            if validator.internal_id == "Choice":
                await call.edit(
                    self.strings(
                        "configuring_option"
                        if isinstance(obj_type, bool)
                        else "configuring_option_lib"
                    ).format(*args),
                    reply_markup=additonal_button_row
                    + self._generate_choice_markup(call, mod, config_opt, obj_type),
                )
                return

            if validator.internal_id == "MultiChoice":
                await call.edit(
                    self.strings(
                        "configuring_option"
                        if isinstance(obj_type, bool)
                        else "configuring_option_lib"
                    ).format(*args),
                    reply_markup=additonal_button_row
                    + self._generate_multi_choice_markup(
                        call, mod, config_opt, obj_type
                    ),
                )
                return

        await call.edit(
            self.strings(
                "configuring_option"
                if isinstance(obj_type, bool)
                else "configuring_option_lib"
            ).format(*args),
            reply_markup=additonal_button_row
            + [
                [
                    {
                        "text": self.strings("enter_value_btn"),
                        "input": self.strings("enter_value_desc"),
                        "handler": self.inline__set_config,
                        "args": (mod, config_opt, call.inline_message_id),
                        "kwargs": {"obj_type": obj_type},
                    }
                ],
                [
                    {
                        "text": self.strings("set_default_btn"),
                        "callback": self.inline__reset_default,
                        "args": (mod, config_opt),
                        "kwargs": {"obj_type": obj_type},
                    }
                ],
                [
                    {
                        "text": self.strings("back_btn"),
                        "callback": self.inline__configure,
                        "args": (mod,),
                        "kwargs": {"obj_type": obj_type},
                    },
                    {"text": self.strings("close_btn"), "action": "close"},
                ],
            ],
        )

    async def inline__configure(
        self,
        call: InlineCall,
        mod: str,
        obj_type: typing.Union[bool, str] = False,
    ):
        btns = [
            {
                "text": param,
                "callback": self.inline__configure_option,
                "args": (mod, param),
                "kwargs": {"obj_type": obj_type},
            }
            for param in self.lookup(mod).config
        ]

        await call.edit(
            self.strings(
                "configuring_mod" if isinstance(obj_type, bool) else "configuring_lib"
            ).format(
                utils.escape_html(mod),
                "\n".join(
                    [
                        "‚ñ´Ô∏è <code>{}</code>: <b>{}</b>".format(
                            utils.escape_html(key),
                            self._get_value(mod, key),
                        )
                        for key in self.lookup(mod).config
                    ]
                ),
            ),
            reply_markup=list(utils.chunks(btns, 2))
            + [
                [
                    {
                        "text": self.strings("back_btn"),
                        "callback": self.inline__global_config,
                        "kwargs": {"obj_type": obj_type},
                    },
                    {"text": self.strings("close_btn"), "action": "close"},
                ]
            ],
        )

    async def inline__choose_category(self, call: typing.Union[Message, InlineCall]):
        await utils.answer(
            call,
            self.strings("choose_core"),
            reply_markup=[
                [
                    {
                        "text": self.strings("builtin"),
                        "callback": self.inline__global_config,
                        "kwargs": {"obj_type": True},
                    },
                    {
                        "text": self.strings("external"),
                        "callback": self.inline__global_config,
                    },
                ],
                *(
                    [
                        [
                            {
                                "text": self.strings("libraries"),
                                "callback": self.inline__global_config,
                                "kwargs": {"obj_type": "library"},
                            }
                        ]
                    ]
                    if self.allmodules.libraries
                    and any(hasattr(lib, "config") for lib in self.allmodules.libraries)
                    else []
                ),
                [{"text": self.strings("close_btn"), "action": "close"}],
            ],
        )

    async def inline__global_config(
        self,
        call: InlineCall,
        page: int = 0,
        obj_type: typing.Union[bool, str] = False,
    ):
        if isinstance(obj_type, bool):
            to_config = [
                mod.strings("name")
                for mod in self.allmodules.modules
                if hasattr(mod, "config")
                and callable(mod.strings)
                and (mod.__origin__.startswith("<core") or not obj_type)
                and (not mod.__origin__.startswith("<core") or obj_type)
            ]
        else:
            to_config = [
                lib.name for lib in self.allmodules.libraries if hasattr(lib, "config")
            ]

        to_config.sort()

        kb = []
        for mod_row in utils.chunks(
            to_config[
                page
                * self._num_rows
                * self._row_size : (page + 1)
                * self._num_rows
                * self._row_size
            ],
            3,
        ):
            row = [
                {
                    "text": btn,
                    "callback": self.inline__configure,
                    "args": (btn,),
                    "kwargs": {"obj_type": obj_type},
                }
                for btn in mod_row
            ]
            kb += [row]

        if len(to_config) > self._num_rows * self._row_size:
            kb += self.inline.build_pagination(
                callback=functools.partial(
                    self.inline__global_config, obj_type=obj_type
                ),
                total_pages=ceil(len(to_config) / (self._num_rows * self._row_size)),
                current_page=page + 1,
            )

        kb += [
            [
                {
                    "text": self.strings("back_btn"),
                    "callback": self.inline__choose_category,
                },
                {"text": self.strings("close_btn"), "action": "close"},
            ]
        ]

        await call.edit(
            self.strings(
                "configure" if isinstance(obj_type, bool) else "configure_lib"
            ),
            reply_markup=kb,
        )

    @loader.command(
        ru_doc="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥—É–ª–∏",
        fr_doc="Configurer les modules",
        it_doc="Configura i moduli",
        de_doc="Konfiguriere Module",
        tr_doc="Mod√ºlleri yapƒ±landƒ±r",
        uz_doc="Modullarni sozlash",
        es_doc="Configurar m√≥dulos",
        kk_doc="–ú–æ–¥—É–ª—å–¥–µ—Ä–¥—ñ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–ª–∞—É",
        alias="cfg",
    )
    async def configcmd(self, message: Message):
        """Configure modules"""
        args = utils.get_args_raw(message)
        if self.lookup(args) and hasattr(self.lookup(args), "config"):
            form = await self.inline.form("üåò", message, silent=True)
            mod = self.lookup(args)
            if isinstance(mod, loader.Library):
                type_ = "library"
            else:
                type_ = mod.__origin__.startswith("<core")

            await self.inline__configure(form, args, obj_type=type_)
            return

        await self.inline__choose_category(message)

    @loader.command(
        ru_doc=(
            "<–º–æ–¥—É–ª—å> <–Ω–∞—Å—Ç—Ä–æ–π–∫–∞> <–∑–Ω–∞—á–µ–Ω–∏–µ> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –º–æ–¥—É–ª—è"
        ),
        fr_doc=(
            "<module> <param√®tre> <valeur> - d√©finir la valeur de configuration pour le"
            " module"
        ),
        it_doc=(
            "<modulo> <impostazione> <valore> - imposta il valore della configurazione"
            " per il modulo"
        ),
        de_doc=(
            "<Modul> <Einstellung> <Wert> - Setze den Wert der Konfiguration f√ºr das"
            " Modul"
        ),
        tr_doc="<mod√ºl> <ayar> <deƒüer> - Mod√ºl i√ßin yapƒ±landƒ±rma deƒüerini ayarla",
        uz_doc="<modul> <sozlash> <qiymat> - modul uchun sozlash qiymatini o'rnatish",
        es_doc=(
            "<m√≥dulo> <configuraci√≥n> <valor> - Establecer el valor de configuraci√≥n"
        ),
        kk_doc=(
            "<–º–æ–¥—É–ª—å> <–Ω–∞—Å—Ç—Ä–æ–π–∫–∞> <–∑–Ω–∞—á–µ–Ω–∏–µ> - –º–æ–¥—É–ª—å “Ø—à—ñ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º”ô–Ω—ñ–Ω –æ—Ä–Ω–∞—Ç—É"
        ),
        alias="setcfg",
    )
    async def fconfig(self, message: Message):
        """<module_name> <property_name> <config_value> - set the config value for the module"""
        args = utils.get_args_raw(message).split(maxsplit=2)

        if len(args) < 3:
            await utils.answer(message, self.strings("args"))
            return

        mod, option, value = args

        instance = self.lookup(mod)
        if not instance:
            await utils.answer(message, self.strings("no_mod"))
            return

        if option not in instance.config:
            await utils.answer(message, self.strings("no_option"))
            return

        instance.config[option] = value
        await utils.answer(
            message,
            self.strings(
                "option_saved"
                if isinstance(instance, loader.Module)
                else "option_saved_lib"
            ).format(
                utils.escape_html(option),
                utils.escape_html(mod),
                self._get_value(mod, option),
            ),
        )
